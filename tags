!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBUG	src/log.h	/^        DEBUG   = 1,$/;"	e	enum:lunar::LogLevel::Level
ERROR	src/log.h	/^        ERROR   = 4,$/;"	e	enum:lunar::LogLevel::Level
FATAL	src/log.h	/^        FATAL   = 5$/;"	e	enum:lunar::LogLevel::Level
FormatItem	src/log.h	/^    class FormatItem{$/;"	c	class:lunar::LogFomatter	access:public
INFO	src/log.h	/^        INFO    = 2,$/;"	e	enum:lunar::LogLevel::Level
Level	src/log.h	/^    enum Level{$/;"	g	class:lunar::LogLevel	access:public
LogAppender	src/log.h	/^  class LogAppender{$/;"	c	namespace:lunar
LogEvent	src/log.cc	/^    LogEvent($/;"	f	namespace:lunar	signature:( const char* file, uint32_t line, uint32_t elapse, uint32_t threadId, uint32_t fiberId, uint64_t timeStamp, const char* threadName, LogLevel::Level level, Logger::ptr logger )
LogEvent	src/log.h	/^    LogEvent($/;"	p	class:lunar::LogEvent	access:public	signature:( const char* file, uint32_t line, uint32_t elapse, uint32_t threadId, uint32_t fiberId, uint64_t timeStamp, const char* threadName, LogLevel::Level level, Logger::ptr logger )
LogEvent	src/log.h	/^  class LogEvent{$/;"	c	namespace:lunar
LogFomatter	src/log.h	/^  class LogFomatter{$/;"	c	namespace:lunar
LogLevel	src/log.h	/^  class LogLevel{$/;"	c	namespace:lunar
Logger	src/log.h	/^  class Logger{$/;"	c	namespace:lunar
Logger::delAppender	src/log.cc	/^    void Logger::delAppender(LogAppender::ptr apd){$/;"	f	class:Logger	signature:(LogAppender::ptr apd)
UNKNOW	src/log.h	/^        UNKNOW  = 0,$/;"	e	enum:lunar::LogLevel::Level
WARONG	src/log.h	/^        WARONG  = 3,$/;"	e	enum:lunar::LogLevel::Level
XX	src/log.cc	7;"	d	file:
__LUNAR_LOG_H__	src/log.h	3;"	d
addAppender	src/log.cc	/^    void Logger::addAppender(LogAppender::ptr apd){$/;"	f	class:lunar::Logger	signature:(LogAppender::ptr apd)
addAppender	src/log.h	/^    void addAppender(LogAppender::ptr apd);$/;"	p	class:lunar::Logger	access:public	signature:(LogAppender::ptr apd)
delAppender	src/log.cc	/^    void Logger::delAppender(LogAppender::ptr apd){$/;"	f	class:Logger	signature:(LogAppender::ptr apd)
delAppender	src/log.h	/^    void delAppender(LogAppender::ptr apd);$/;"	p	class:lunar::Logger	access:public	signature:(LogAppender::ptr apd)
find	src/log.cc	/^    std::list<LogAppender::ptr>::Iterator find(LogAppender::ptr apd) {$/;"	f	namespace:lunar	signature:(LogAppender::ptr apd)
find	src/log.h	/^    std::list<LogAppender::ptr>::Iterator find(LogAppender::ptr apd)const ;$/;"	p	class:lunar::Logger	access:public	signature:(LogAppender::ptr apd) const
getElapse	src/log.h	/^    uint32_t getElapse()const { return m_elapse; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
getFiberId	src/log.h	/^    uint32_t getFiberId()const { return m_fiberId; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
getFile	src/log.h	/^    const char* getFile()const { return m_file; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
getLevel	src/log.h	/^    LogLevel::Level getLevel()const { return m_level; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
getLevel	src/log.h	/^    LogLevel::Level getLevel()const { return m_level; }$/;"	f	class:lunar::Logger	access:public	signature:() const
getLine	src/log.h	/^    uint32_t getLine()const { return m_line; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
getMsg	src/log.h	/^    std::stringstrea&m getMsg() { return m_msg; }$/;"	f	class:lunar::LogEvent	access:public	signature:()
getThreadId	src/log.h	/^    uint32_t getThreadId()const { return m_threadId; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
getThreadName	src/log.h	/^    const char* getThreadName()const { return m_threadName; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
getTimeStamp	src/log.h	/^    uint64_t getTimeStamp()const { return m_timeStamp; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
lunar	src/log.cc	/^namespace lunar{$/;"	n	file:
lunar	src/log.h	/^namespace lunar{$/;"	n
lunar::LogAppender	src/log.h	/^  class LogAppender{$/;"	c	namespace:lunar
lunar::LogAppender::m_formatter	src/log.h	/^   LogFomatter::ptr m_formatter;$/;"	m	class:lunar::LogAppender	access:private
lunar::LogAppender::m_level	src/log.h	/^   LogLevel::Level m_level;$/;"	m	class:lunar::LogAppender	access:private
lunar::LogAppender::ptr	src/log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:lunar::LogAppender	access:public
lunar::LogEvent	src/log.cc	/^    LogEvent($/;"	f	namespace:lunar	signature:( const char* file, uint32_t line, uint32_t elapse, uint32_t threadId, uint32_t fiberId, uint64_t timeStamp, const char* threadName, LogLevel::Level level, Logger::ptr logger )
lunar::LogEvent	src/log.h	/^  class LogEvent{$/;"	c	namespace:lunar
lunar::LogEvent::LogEvent	src/log.h	/^    LogEvent($/;"	p	class:lunar::LogEvent	access:public	signature:( const char* file, uint32_t line, uint32_t elapse, uint32_t threadId, uint32_t fiberId, uint64_t timeStamp, const char* threadName, LogLevel::Level level, Logger::ptr logger )
lunar::LogEvent::getElapse	src/log.h	/^    uint32_t getElapse()const { return m_elapse; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
lunar::LogEvent::getFiberId	src/log.h	/^    uint32_t getFiberId()const { return m_fiberId; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
lunar::LogEvent::getFile	src/log.h	/^    const char* getFile()const { return m_file; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
lunar::LogEvent::getLevel	src/log.h	/^    LogLevel::Level getLevel()const { return m_level; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
lunar::LogEvent::getLine	src/log.h	/^    uint32_t getLine()const { return m_line; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
lunar::LogEvent::getMsg	src/log.h	/^    std::stringstrea&m getMsg() { return m_msg; }$/;"	f	class:lunar::LogEvent	access:public	signature:()
lunar::LogEvent::getThreadId	src/log.h	/^    uint32_t getThreadId()const { return m_threadId; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
lunar::LogEvent::getThreadName	src/log.h	/^    const char* getThreadName()const { return m_threadName; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
lunar::LogEvent::getTimeStamp	src/log.h	/^    uint64_t getTimeStamp()const { return m_timeStamp; }$/;"	f	class:lunar::LogEvent	access:public	signature:() const
lunar::LogEvent::m_elapse	src/log.h	/^    uint32_t m_elapse;$/;"	m	class:lunar::LogEvent	access:private
lunar::LogEvent::m_fiberId	src/log.h	/^    uint32_t m_fiberId;$/;"	m	class:lunar::LogEvent	access:private
lunar::LogEvent::m_file	src/log.h	/^    const char* m_file;$/;"	m	class:lunar::LogEvent	access:private
lunar::LogEvent::m_level	src/log.h	/^    LogLevel::Level m_level;$/;"	m	class:lunar::LogEvent	access:private
lunar::LogEvent::m_line	src/log.h	/^    uint32_t m_line;$/;"	m	class:lunar::LogEvent	access:private
lunar::LogEvent::m_logger	src/log.h	/^    Logger::ptr m_logger;$/;"	m	class:lunar::LogEvent	access:private
lunar::LogEvent::m_msg	src/log.h	/^    std::stringstream m_msg;$/;"	m	class:lunar::LogEvent	access:private
lunar::LogEvent::m_threadId	src/log.h	/^    uint32_t m_threadId;$/;"	m	class:lunar::LogEvent	access:private
lunar::LogEvent::m_threadName	src/log.h	/^    const char* m_threadName;$/;"	m	class:lunar::LogEvent	access:private
lunar::LogEvent::m_timeStamp	src/log.h	/^    uint64_t m_timeStamp;$/;"	m	class:lunar::LogEvent	access:private
lunar::LogEvent::ptr	src/log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:lunar::LogEvent	access:public
lunar::LogFomatter	src/log.h	/^  class LogFomatter{$/;"	c	namespace:lunar
lunar::LogFomatter::FormatItem	src/log.h	/^    class FormatItem{$/;"	c	class:lunar::LogFomatter	access:public
lunar::LogFomatter::ptr	src/log.h	/^    typedef std::shared_ptr<LogFomatter> ptr;$/;"	t	class:lunar::LogFomatter	access:public
lunar::LogLevel	src/log.h	/^  class LogLevel{$/;"	c	namespace:lunar
lunar::LogLevel::DEBUG	src/log.h	/^        DEBUG   = 1,$/;"	e	enum:lunar::LogLevel::Level
lunar::LogLevel::ERROR	src/log.h	/^        ERROR   = 4,$/;"	e	enum:lunar::LogLevel::Level
lunar::LogLevel::FATAL	src/log.h	/^        FATAL   = 5$/;"	e	enum:lunar::LogLevel::Level
lunar::LogLevel::INFO	src/log.h	/^        INFO    = 2,$/;"	e	enum:lunar::LogLevel::Level
lunar::LogLevel::Level	src/log.h	/^    enum Level{$/;"	g	class:lunar::LogLevel	access:public
lunar::LogLevel::UNKNOW	src/log.h	/^        UNKNOW  = 0,$/;"	e	enum:lunar::LogLevel::Level
lunar::LogLevel::WARONG	src/log.h	/^        WARONG  = 3,$/;"	e	enum:lunar::LogLevel::Level
lunar::LogLevel::toString	src/log.cc	/^    const std::string LogLevel::toString(LogLevel::Level level){$/;"	f	class:lunar::LogLevel	signature:(LogLevel::Level level)
lunar::LogLevel::toString	src/log.h	/^    static const std::string toString(LogLevel::Level level);$/;"	p	class:lunar::LogLevel	access:public	signature:(LogLevel::Level level)
lunar::Logger	src/log.h	/^  class Logger{$/;"	c	namespace:lunar
lunar::Logger::addAppender	src/log.cc	/^    void Logger::addAppender(LogAppender::ptr apd){$/;"	f	class:lunar::Logger	signature:(LogAppender::ptr apd)
lunar::Logger::addAppender	src/log.h	/^    void addAppender(LogAppender::ptr apd);$/;"	p	class:lunar::Logger	access:public	signature:(LogAppender::ptr apd)
lunar::Logger::delAppender	src/log.h	/^    void delAppender(LogAppender::ptr apd);$/;"	p	class:lunar::Logger	access:public	signature:(LogAppender::ptr apd)
lunar::Logger::find	src/log.h	/^    std::list<LogAppender::ptr>::Iterator find(LogAppender::ptr apd)const ;$/;"	p	class:lunar::Logger	access:public	signature:(LogAppender::ptr apd) const
lunar::Logger::getLevel	src/log.h	/^    LogLevel::Level getLevel()const { return m_level; }$/;"	f	class:lunar::Logger	access:public	signature:() const
lunar::Logger::m_Appenders	src/log.h	/^    std::list<LogAppender::ptr> m_Appenders;$/;"	m	class:lunar::Logger	access:private
lunar::Logger::m_formatter	src/log.h	/^    LogFomatter::ptr m_formatter;$/;"	m	class:lunar::Logger	access:private
lunar::Logger::m_level	src/log.h	/^    LogLevel::Level m_level;$/;"	m	class:lunar::Logger	access:private
lunar::Logger::ptr	src/log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:lunar::Logger	access:public
lunar::Logger::setLevel	src/log.h	/^    void setLevel(LogLevel::Level level) { return m_level = level; }$/;"	f	class:lunar::Logger	access:public	signature:(LogLevel::Level level)
lunar::find	src/log.cc	/^    std::list<LogAppender::ptr>::Iterator find(LogAppender::ptr apd) {$/;"	f	namespace:lunar	signature:(LogAppender::ptr apd)
lunar::push_back	src/log.cc	/^        m_Appenders.push_back(apd);$/;"	p	namespace:lunar	file:	signature:(apd)
m_Appenders	src/log.h	/^    std::list<LogAppender::ptr> m_Appenders;$/;"	m	class:lunar::Logger	access:private
m_elapse	src/log.h	/^    uint32_t m_elapse;$/;"	m	class:lunar::LogEvent	access:private
m_fiberId	src/log.h	/^    uint32_t m_fiberId;$/;"	m	class:lunar::LogEvent	access:private
m_file	src/log.h	/^    const char* m_file;$/;"	m	class:lunar::LogEvent	access:private
m_formatter	src/log.h	/^    LogFomatter::ptr m_formatter;$/;"	m	class:lunar::Logger	access:private
m_formatter	src/log.h	/^   LogFomatter::ptr m_formatter;$/;"	m	class:lunar::LogAppender	access:private
m_level	src/log.h	/^    LogLevel::Level m_level;$/;"	m	class:lunar::LogEvent	access:private
m_level	src/log.h	/^    LogLevel::Level m_level;$/;"	m	class:lunar::Logger	access:private
m_level	src/log.h	/^   LogLevel::Level m_level;$/;"	m	class:lunar::LogAppender	access:private
m_line	src/log.h	/^    uint32_t m_line;$/;"	m	class:lunar::LogEvent	access:private
m_logger	src/log.h	/^    Logger::ptr m_logger;$/;"	m	class:lunar::LogEvent	access:private
m_msg	src/log.h	/^    std::stringstream m_msg;$/;"	m	class:lunar::LogEvent	access:private
m_threadId	src/log.h	/^    uint32_t m_threadId;$/;"	m	class:lunar::LogEvent	access:private
m_threadName	src/log.h	/^    const char* m_threadName;$/;"	m	class:lunar::LogEvent	access:private
m_timeStamp	src/log.h	/^    uint64_t m_timeStamp;$/;"	m	class:lunar::LogEvent	access:private
ptr	src/log.h	/^    typedef std::shared_ptr<LogAppender> ptr;$/;"	t	class:lunar::LogAppender	access:public
ptr	src/log.h	/^    typedef std::shared_ptr<LogEvent> ptr;$/;"	t	class:lunar::LogEvent	access:public
ptr	src/log.h	/^    typedef std::shared_ptr<LogFomatter> ptr;$/;"	t	class:lunar::LogFomatter	access:public
ptr	src/log.h	/^    typedef std::shared_ptr<Logger> ptr;$/;"	t	class:lunar::Logger	access:public
push_back	src/log.cc	/^        m_Appenders.push_back(apd);$/;"	p	namespace:lunar	file:	signature:(apd)
setLevel	src/log.h	/^    void setLevel(LogLevel::Level level) { return m_level = level; }$/;"	f	class:lunar::Logger	access:public	signature:(LogLevel::Level level)
toString	src/log.cc	/^    const std::string LogLevel::toString(LogLevel::Level level){$/;"	f	class:lunar::LogLevel	signature:(LogLevel::Level level)
toString	src/log.h	/^    static const std::string toString(LogLevel::Level level);$/;"	p	class:lunar::LogLevel	access:public	signature:(LogLevel::Level level)
